* DONE Decorate homepage
CLOCK: [2019-02-10 Sun 16:00]--[2019-02-10 Sun 16:20] =>  0:20
* DONE Scaffold schemas
** DONE Pharmacies.Pharmacy (name: string)
CLOCK: [2019-02-10 Sun 16:40]--[2019-02-10 Sun 17:18] =>  0:38
pharmacy1 = %Pharmacy{name: "Alfa Pharmacy"}
pharmacy2 = %Pharmacy{name: "Bravo Pharmacy"}
** DONE Pharmacies.Location (pharmacy_id, latitude: string, longitude: string)
CLOCK: [2019-02-10 Sun 17:34]--[2019-02-10 Sun 18:10] =>  0:36
location1 = %Location{latitude: "39.9612", longitude: "82.9988"}
location2 = %Location{latitude: "40.9612", longitude: "72.9988"}
** DONE Add and configure ex_machina
CLOCK: [2019-02-10 Sun 20:30]--[2019-02-10 Sun 21:41] =>  1:11
CLOCK: [2019-02-10 Sun 19:14]--[2019-02-10 Sun 19:19] =>  0:05
** DONE Orders.Prescription (name: string)
CLOCK: [2019-02-10 Sun 21:43]--[2019-02-10 Sun 21:53] =>  0:10
prescription1 = %Prescription{name: "Allegra"}
prescription2 = %Prescription{name: "Rolaids"}
** DONE Orders.Patient (first_name: string, last_name: string)
CLOCK: [2019-02-10 Sun 21:54]--[2019-02-10 Sun 22:02] =>  0:08
patient1 = %Patient{first_name: "First", last_name: "User"}
patient2 = %Patient{first_name: "Second", last_name: "User"}
** DONE Orders.Order (patient_id, prescription_id, location_id)
CLOCK: [2019-02-10 Sun 23:16]--[2019-02-10 Sun 23:32] =>  0:16
CLOCK: [2019-02-10 Sun 22:28]--[2019-02-10 Sun 23:03] =>  0:35
* TODO Add Pharmacy authentication
Do we need a separate "credential" schema?
No, I don't think so. As an service external to their company, I would expect pharmacies to log in using credentials they create. It seems very unlikely that they would ever log in using social media accounts, some of which require the application to store OAuth tokens. Another likely case would be that they could sign in using SSO (which would have to be configured per client). Even under this architecture, systems I looked into (e.g. SAML) don't require the "service application" to store any kind of user credential.
** DONE Add comeonin and pbkdf2_elixir as dependencies
CLOCK: [2019-02-10 Sun 23:53]--[2019-02-10 Sun 23:54] =>  0:01
** DONE Add password_hash field to "pharmacies" table
CLOCK: [2019-02-10 Sun 23:54]--[2019-02-11 Mon 00:35] =>  0:41
** DONE Update Pharmacies.Pharmacy schema to validate passwords
** DONE Update Pharmacies.Pharmacy schema to hash passwords
** DONE Create SessionController with new, create, and delete actions
** DONE Implement SessionController.new
CLOCK: [2019-02-11 Mon 00:44]--[2019-02-11 Mon 00:57] =>  0:13
** TODO Create test_web/controllers/auth.ex
*** TODO Add 'call' function to assign current_user if user_id cookie exists
*** TODO Add 'authenticate' function to check session and potentially redirect to new session page
*** TODO Add 'login' function to take a user and set their user_id session and current_user
*** TODO Add 'authenticate_pharmacy' function to verify credentials and call 'login' if correct
*** TODO Add 'logout' function
** TODO Implement SessionController.create
** TODO Implement SessionController.delete
** TODO Restrict access to all but the SessionController and PharmacyController.new to authenticated users
** TODO Add register, login, and logout links to page layout
** TODO Scope all locations to the current pharmacy
** TODO Update locations 'create' to use current pharmacy as pharmacy_id
* TODO Write README
* Things to add
** Password confirmation field
** Sorting and filtering of orders
* Notes
** The fixtures situation is a complete disaster. The generators generated two different kinds of fixtures, some for the context tests and some for the controller tests, but in different ways. Also, the generated fixtures for context tests breaks if you have multiple schemas per context that relate to one another (which I do). It's not that much of an edge-case. I'm going to use ExMachina instead.
** Plataformatec, the people who brought us Devise, have no authentication system for Phoenix, and poor devs like me have to write our own questionable implementations by hand.
** Ecto's syntax to validate multi-column uniqueness constraints is unintuitive, and requires you to assign the constraint to only one column.
** ThoughtBot's ExMachina preloads associations by default. The generated Phoenix context implementations do not (and for good reason). The way the Phoenix generated tests compare context output to fixtures/factories is therefore incompatible with ExMachina.
